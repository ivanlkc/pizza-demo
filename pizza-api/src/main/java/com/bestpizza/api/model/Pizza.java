/*
 * Best Pizza Order API
 * This is the OpenAPI definition for the Best Pizza Order API. You can view it using the Swagger Editor available at [https://editor.swagger.io/](https://editor.swagger.io/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bestpizza.api.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
//import io.swagger.annotations.ApiModel;
//import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;


/**
 * Pizza
 */
@JsonPropertyOrder({
  Pizza.JSON_PROPERTY_NAME,
  Pizza.JSON_PROPERTY_SIZE,
  Pizza.JSON_PROPERTY_QUANTITY,
  Pizza.JSON_PROPERTY_TOPPINGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-01T07:23:00.448234800+08:00[Asia/Hong_Kong]")
@XmlRootElement(name = "Pizza")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Pizza")
public class Pizza implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  @XmlElement(name = "name")
  private String name;

  public static final String JSON_PROPERTY_SIZE = "size";
  @XmlElement(name = "size")
  private Integer size;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  @XmlElement(name = "quantity")
  private Integer quantity;

  public static final String JSON_PROPERTY_TOPPINGS = "toppings";
  // Is a container wrapped=false
  // items.name=toppings items.baseName=toppings items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "toppings")
  private List<String> toppings = null;


  public Pizza name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  //@javax.annotation.Nonnull
  //@ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "name")

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "name")
  public void setName(String name) {
    this.name = name;
  }


  public Pizza size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  //@javax.annotation.Nonnull
  //@ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "size")

  public Integer getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "size")
  public void setSize(Integer size) {
    this.size = size;
  }


  public Pizza quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  //@javax.annotation.Nonnull
  //@ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "quantity")

  public Integer getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "quantity")
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Pizza toppings(List<String> toppings) {
    this.toppings = toppings;
    return this;
  }

  public Pizza addToppingsItem(String toppingsItem) {
    if (this.toppings == null) {
      this.toppings = new ArrayList<>();
    }
    this.toppings.add(toppingsItem);
    return this;
  }

   /**
   * Get toppings
   * @return toppings
  **/
  //@javax.annotation.Nullable
  //@ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TOPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getToppings() {
    return toppings;
  }


  @JsonProperty(JSON_PROPERTY_TOPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToppings(List<String> toppings) {
    this.toppings = toppings;
  }


  /**
   * Return true if this Pizza object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pizza pizza = (Pizza) o;
    return Objects.equals(this.name, pizza.name) &&
        Objects.equals(this.size, pizza.size) &&
        Objects.equals(this.quantity, pizza.quantity) &&
        Objects.equals(this.toppings, pizza.toppings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, size, quantity, toppings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pizza {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    toppings: ").append(toIndentedString(toppings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

